<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Latex小技巧</title>
    <url>/2021/01/18/Latex%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4d575129032628c6816cb6d7fb5ebf68949a66c682062001c29a1acb38d8157c">51a7fedf40e220e431f55d7f94a979895e634904bf30e45d483c6a047404c6e6a854ccad977215e2e53feb98d6b0948035c8511278c26fc43c971cbfd49062ce01abf448d7439937ac32fb31fa668e04f5dc926af78c1ce6f590ffb0c2ee719bec83ea7249b0cf2034d381884511a4a773225674b3ce92a6b2c6fce31d16820ac041b9255cdaecd171f30e7bbbbcdffc26a3f35bd4834d91212407699f079f4736d5f839218124ba50d220c435eeefbd4d069e05c7db02c4c68e2fab93f94050709aa72bc16f263fd072856060d8e0f94d7c61a9468ed13ddabb102476d7f80f989a9a7aee392f2763f14c65e5ea88b4d1df6744298ec9f3538e12b1ef31c36fd6db48b1089a55d12ef71d42a351e961bb82b88d263fd32d1449de17885228c81b00c46e03415373527223a5c59c71a68b497263250352882636571cf07eafff0e6944929ff009ca413ae10745b9ed750581640f74a7f46fd172a95742ec3b5667d3ee7fae479f6967ab34efd7ae64bcbfa5e1fa52e7c1639e91045983a93497fbb0b6b200f2ca8f8ac2504e9a802f21a7ce24890ab231bf9db842b348ad348fa9d4db0621d3509a6e46b09b85680e33627187171815370766237857e5b61220c88cc90a22687c5af7151b2fd26391846890bc548127b1dc1787e2ec148dd88942e6eef1805eeb21884ea3eb96418ac84e66eb1381a499ec774dadb3d41c0aed3ad4e777294b0caea675ee9cf8a75c1a223ef457e90179430afcc849b930635544a0e0548e57bdff67dfc0d7c388982b5f6b8b1145e0505bdfc35689bd6ff8d7ca17cb07cc86ddd4f285b58ae2cdc5caba1aa3d4da106cf94e402a0e728b266c24e6f85d309c1d2607093d59c7bc1e51f6aedfa9ecd3bae3664493298594d9fe675ca1a8073b14c49bc07f3bf327dd7763699d742e2d91bf45583ee3519d070900fb1cdefbc9736aff630518670ac1658ec3cd1b88f04a10ff7fbd4303b42e5fb49448d76b5a0d09e21b7f0925b3733db8f048141779df64322b57d6d098cb894677bb6391a9d78fb509d00915f092358d81a6c47a147a358a0b3b981f5123351a5f194c0525537c052f7065f0a8472cac22725c23e1bf80d908abae286f4d63</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Latex</category>
        <category>Latex小技巧</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>Latex小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2021/01/31/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h2>
<p><code>rm -r text</code></p>
<blockquote>
<p>删除text文件</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown快速入门</title>
    <url>/2021/01/11/Markdown%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%88typora%EF%BC%89/</url>
    <content><![CDATA[<h1 id="markdown快速入门typora"><a class="markdownIt-Anchor" href="#markdown快速入门typora"></a> Markdown快速入门（typora）</h1>
<a id="more"></a>
<h2 id="代码块"><a class="markdownIt-Anchor" href="#代码块"></a> 代码块：</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#代码块语法：</span><br><span class="hljs-keyword">import</span> requests<br>print(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br></code></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题：</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//标题语法</span><br># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure>
<h1 id="一级标题"><a class="markdownIt-Anchor" href="#一级标题"></a> 一级标题</h1>
<h2 id="二级标题"><a class="markdownIt-Anchor" href="#二级标题"></a> 二级标题</h2>
<h3 id="三级标题"><a class="markdownIt-Anchor" href="#三级标题"></a> 三级标题</h3>
<h4 id="四级标题"><a class="markdownIt-Anchor" href="#四级标题"></a> 四级标题</h4>
<h5 id="五级标题"><a class="markdownIt-Anchor" href="#五级标题"></a> 五级标题</h5>
<h6 id="六级标题"><a class="markdownIt-Anchor" href="#六级标题"></a> 六级标题</h6>
<h2 id="字体"><a class="markdownIt-Anchor" href="#字体"></a> 字体</h2>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//加粗</span><br>**等不到天黑**<br><span class="hljs-comment">//代码高亮显示</span><br>==我不是孙红雷==<br><span class="hljs-comment">//删除线</span><br>~~被删除的文字~~<br><span class="hljs-comment">//斜体</span><br>*斜体内容*<br><span class="hljs-comment">//下划线</span><br>&lt;u&gt;下划线内容&lt;/u&gt;<br></code></pre></td></tr></table></figure>
<p><em><strong><u><mark>吃饭了吗</mark></u></strong></em></p>
<h3 id="加粗"><a class="markdownIt-Anchor" href="#加粗"></a> 加粗</h3>
<p><strong>等不到天黑</strong></p>
<hr />
<h3 id="代码高亮显示"><a class="markdownIt-Anchor" href="#代码高亮显示"></a> 代码高亮显示</h3>
<p><mark>我不是孙红雷</mark></p>
<hr />
<h3 id="删除线"><a class="markdownIt-Anchor" href="#删除线"></a> 删除线</h3>
<p><s>被删除的文字</s></p>
<hr />
<h3 id="斜体"><a class="markdownIt-Anchor" href="#斜体"></a> 斜体</h3>
<p><em>斜体内容</em></p>
<hr />
<h3 id="下划线"><a class="markdownIt-Anchor" href="#下划线"></a> 下划线</h3>
<p><u>下划线内容</u></p>
<hr />
<h2 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用：</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//引用语法</span><br>&gt;作者：小张<br>&gt;&gt;作者：小张<br>&gt;&gt;&gt;作者：小张<br></code></pre></td></tr></table></figure>
<blockquote>
<p>作者：小张</p>
<blockquote>
<p>作者：小张</p>
<blockquote>
<p>作者：小张</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="分割线"><a class="markdownIt-Anchor" href="#分割线"></a> 分割线</h2>
<h2 id="-code5-"><a class="markdownIt-Anchor" href="#-code5-"></a> <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分割线</span><br>---<br><span class="hljs-comment">//分割线2</span><br>***<br></code></pre></td></tr></table></figure></h2>
<hr />
<h2 id="图片插入"><a class="markdownIt-Anchor" href="#图片插入"></a> 图片插入</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在线图片</span><br>![我的照片](图片链接)<br><span class="hljs-comment">//本地图片</span><br>![我的照片](图片地址)<br></code></pre></td></tr></table></figure>
<p><img src="https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00659-2530.jpg" alt="我的照片" title="照片" /></p>
<h2 id="超链接"><a class="markdownIt-Anchor" href="#超链接"></a> 超链接</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//超链接语法</span><br>[我的CSDN](https:<span class="hljs-comment">//blog.csdn.net/zy440458)</span><br>[教程](https:<span class="hljs-comment">//www.runoob.com/markdown/md-advance.html)</span><br><span class="hljs-comment">//&lt;https:blog.csdn.net/zy440458&gt; //直接插入超链接</span><br></code></pre></td></tr></table></figure>
<p>这是我的<a href="https://blog.csdn.net/zy440458">CSDN</a></p>
<p>这里是Markdown<a href="https://www.runoob.com/markdown/md-advance.html">教程</a></p>
<h2 id="列表语法"><a class="markdownIt-Anchor" href="#列表语法"></a> 列表语法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//无序列表</span><br>- 目录<span class="hljs-number">1</span><br>- 目录<span class="hljs-number">2</span><br>- 目录<span class="hljs-number">3</span><br><span class="hljs-comment">//有序列表 序号+点+空格</span><br><span class="hljs-number">1.</span> 首页<br><span class="hljs-comment">//列表嵌套按tab</span><br><span class="hljs-comment">//列表缩进按shift+tab</span><br></code></pre></td></tr></table></figure>
<ul>
<li>目录1</li>
<li>目录2</li>
<li>目录3
<ul>
<li>1、首页</li>
<li>2、分类</li>
<li>3、标签</li>
</ul>
</li>
</ul>
<h2 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h2>
<table>
<thead>
<tr>
<th>成绩</th>
<th>语文</th>
<th>数学</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="复习"><a class="markdownIt-Anchor" href="#复习"></a> 复习</h2>
<p><em>斜体</em></p>
<p><strong>加粗</strong></p>
<p><mark>高亮</mark></p>
<p><u>下划线</u></p>
<p><em><strong>粗斜体</strong></em></p>
<ul>
<li>第一项</li>
<li>第二项
<ul>
<li>第一项</li>
<li>第二项
<ul>
<li>第一项</li>
<li>第二项
<ul>
<li>第一项</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>第一项</li>
<li>第二项 列表嵌套加上
<ol>
<li>第三项
<ol>
<li>第四项
<ol>
<li>第五项
<ol>
<li>第六项</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>区块引用</p>
<p>菜鸟教程</p>
<p>学的不仅是技术更是梦想</p>
</blockquote>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项
<ol>
<li>第一项</li>
</ol>
</li>
</ol>
</li>
</ol>
</blockquote>
<ul>
<li>
<p>第一项</p>
<blockquote>
<p>菜鸟教程</p>
<p>学的不仅是技术更是梦想</p>
</blockquote>
</li>
<li>
<p>第二项</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br></code></pre></td></tr></table></figure>
<p>这是一个链接<a href="https://www.runoob.com/markdown/md-link.html">菜鸟教程</a></p>
<p>##高级链接</p>
<p>这个链接用1作为网址变量<a href="http://www.google.com/">Google</a></p>
<p>这个链接用runoob作为网址变量<a href="http://www.runoob.com/">Runoob</a></p>
<p>通过变量来设置一个链接，变量赋值在文档末尾进行</p>
<h2 id="补充几个实例效果图"><a class="markdownIt-Anchor" href="#补充几个实例效果图"></a> 补充几个实例效果图</h2>
<h3 id="横向流程图"><a class="markdownIt-Anchor" href="#横向流程图"></a> 横向流程图</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mermaid">graph LR<br>A[方形] --&gt;B(圆角)<br>    B --&gt; C&#123;条件a&#125;<br>    C --&gt;|a&#x3D;1| D[结果1]<br>    C --&gt;|a&#x3D;2| E[结果2]<br>    F[横向流程图]<br></code></pre></td></tr></table></figure>
<h3 id="竖向流程图"><a class="markdownIt-Anchor" href="#竖向流程图"></a> 竖向流程图</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mermaid">graph TD<br>A[方形] --&gt; B(圆角)<br>    B --&gt; C&#123;条件a&#125;<br>    C --&gt; |a&#x3D;1| D[结果1]<br>    C --&gt; |a&#x3D;2| E[结果2]<br>    F[竖向流程图]<br></code></pre></td></tr></table></figure>
<h3 id="标准流程图"><a class="markdownIt-Anchor" href="#标准流程图"></a> 标准流程图</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs flow">st&#x3D;&gt;start: 开始框<br>op&#x3D;&gt;operation: 处理框<br>cond&#x3D;&gt;condition: 判断框(是或否?)<br>sub1&#x3D;&gt;subroutine: 子流程<br>io&#x3D;&gt;inputoutput: 输入输出框<br>e&#x3D;&gt;end: 结束框<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;io-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br></code></pre></td></tr></table></figure>
<h3 id="标准流程图横向"><a class="markdownIt-Anchor" href="#标准流程图横向"></a> 标准流程图(横向)</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs flow">st&#x3D;&gt;start: 开始框<br>op&#x3D;&gt;operation: 处理框<br>cond&#x3D;&gt;condition: 判断框(是或否?)<br>sub1&#x3D;&gt;subroutine: 子流程<br>io&#x3D;&gt;inputoutput: 输入输出框<br>e&#x3D;&gt;end: 结束框<br>st(right)-&gt;op(right)-&gt;cond<br>cond(yes)-&gt;io(bottom)-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br></code></pre></td></tr></table></figure>
<h3 id="uml时序图"><a class="markdownIt-Anchor" href="#uml时序图"></a> UML时序图</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs sequence">对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象A-&gt;对象B: 你真的好吗？<br></code></pre></td></tr></table></figure>
<h3 id="uml时序图复杂"><a class="markdownIt-Anchor" href="#uml时序图复杂"></a> UML时序图复杂</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs sequence">Title: 标题：复杂使用<br>对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象B-&gt;小三: 你好吗<br>小三--&gt;&gt;对象A: 对象B找我了<br>对象A-&gt;对象B: 你真的好吗？<br>Note over 小三,对象B: 我们是朋友<br>participant C<br>Note right of C: 没人陪我玩<br></code></pre></td></tr></table></figure>
<h3 id="uml标准时序图"><a class="markdownIt-Anchor" href="#uml标准时序图"></a> UML标准时序图</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mermaid">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头<br>  sequenceDiagram<br>    participant 张三<br>    participant 李四<br>    张三-&gt;王五: 王五你好吗？<br>    loop 健康检查<br>        王五-&gt;王五: 与疾病战斗<br>    end<br>    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...<br>    李四--&gt;&gt;张三: 很好!<br>    王五-&gt;李四: 你怎么样?<br>    李四--&gt;王五: 很好!<br></code></pre></td></tr></table></figure>
<h3 id="甘特图"><a class="markdownIt-Anchor" href="#甘特图"></a> 甘特图</h3>
<h2 id="-code17-"><a class="markdownIt-Anchor" href="#-code17-"></a> <figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mermaid">%% 语法示例<br>        gantt<br>        dateFormat  YYYY-MM-DD<br>        title 软件开发甘特图<br>        section 设计<br>        需求                      :done,    des1, 2020-08-03,2020-08-03<br>        原型                      :active,  des2, 2020-08-04, 1d<br>        UI设计                     :         des3, after des2, 5d<br>    未来任务                     :         des4, after des3, 5d<br>        section 开发<br>        学习准备理解需求                      :crit, done, 2014-01-06,24h<br>        设计框架                             :crit, done, after des2, 2d<br>        开发                                 :crit, active, 3d<br>        未来任务                              :crit, 5d<br>        耍                                   :2d<br>        section 测试<br>        功能测试                              :active, a1, after des3, 3d<br>        压力测试                               :after a1  , 20h<br>        测试报告                               : 48h<br></code></pre></td></tr></table></figure></h2>
]]></content>
      <categories>
        <category>语言</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>轻文本标记语言</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT_BasicLevel</title>
    <url>/2021/01/12/PAT-BasicLevel/</url>
    <content><![CDATA[<h2 id="pat乙级"><a class="markdownIt-Anchor" href="#pat乙级"></a> PAT乙级</h2>
<a id="more"></a>
<p>1、<a href="https://blog.csdn.net/zy440458/article/details/112323681">1001 害死人不偿命的(3n+1)猜想 </a></p>
<p>2、<a href="https://blog.csdn.net/zy440458/article/details/112338083">1002 写出这个数</a></p>
<p>3、<a href="https://blog.csdn.net/zy440458/article/details/112425543">1003 我要通过！</a></p>
<p>4、<a href="https://blog.csdn.net/zy440458/article/details/112430347">1004 成绩排名</a></p>
<p>6、<a href="https://blog.csdn.net/zy440458/article/details/112438780">1006 换个格式输出整数</a></p>
<p>7、<a href="https://blog.csdn.net/zy440458/article/details/112440260">1007 素数对猜想</a></p>
<p>10、<a href="https://blog.csdn.net/zy440458/article/details/112548104">1010 一元多项式求导</a></p>
<p>11、<a href="https://blog.csdn.net/zy440458/article/details/112591705">1011 A+B 和 C</a></p>
<p>16、<a href="https://blog.csdn.net/zy440458/article/details/112628801">1016 部分A+B</a></p>
<p>17、<a href="https://blog.csdn.net/zy440458/article/details/112632681">1017 A除以B</a></p>
<p>21、<a href="https://blog.csdn.net/zy440458/article/details/112634030">1021 个位数统计</a></p>
<p>22、<a href="https://blog.csdn.net/zy440458/article/details/112635003">1022 D进制的A+B</a></p>
<p>26、<a href="https://blog.csdn.net/zy440458/article/details/112645142">1026 程序运行时间</a></p>
<p>28、<a href="https://blog.csdn.net/zy440458/article/details/112646937">1028 人口普查</a></p>
<p>32、<a href="https://blog.csdn.net/zy440458/article/details/112650269">1032 挖掘机技术哪家强</a></p>
<p>36、<a href="https://blog.csdn.net/zy440458/article/details/112654449">1036 跟奥巴马一起编程</a></p>
<p>41、<a href="https://blog.csdn.net/zy440458/article/details/112656487">1041 考试座位号</a></p>
<p>46、<a href="https://blog.csdn.net/zy440458/article/details/112657754">1046 划拳</a></p>
<p>47、<a href="https://blog.csdn.net/zy440458/article/details/112686118">1047 编程团体赛</a></p>
<p>49、<a href="https://blog.csdn.net/zy440458/article/details/112692792">1049 数列的片段和</a></p>
<p>51、<a href="https://blog.csdn.net/zy440458/article/details/112695997">1051 复数乘法</a></p>
<p>56、<a href="https://blog.csdn.net/zy440458/article/details/112711014">1056 组合数的和</a></p>
<p>57、<a href="https://blog.csdn.net/zy440458/article/details/112713839">1057 数零壹</a></p>
<p>60、<a href="https://blog.csdn.net/zy440458/article/details/112716432">1060 爱丁顿数</a></p>
<p>61、<a href="https://blog.csdn.net/zy440458/article/details/112719606">1061 判断题</a></p>
<p>62、<a href="https://blog.csdn.net/zy440458/article/details/112722558">1062 最简分数</a></p>
<p>63、<a href="https://blog.csdn.net/zy440458/article/details/112723283">1063 计算谱半径</a></p>
<p>76、<a href="https://blog.csdn.net/zy440458/article/details/112624426">1076 Wifi密码</a></p>
<hr />
<p><a href="https://zhangying458.github.io/">个人博客</a></p>
]]></content>
      <categories>
        <category>PAT</category>
        <category>PAT-BasicLevel</category>
      </categories>
      <tags>
        <tag>PAT乙级</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言入门语法</title>
    <url>/2021/01/13/R%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="r语言入门语法"><a class="markdownIt-Anchor" href="#r语言入门语法"></a> R语言入门语法</h1>
<a id="more"></a>
<h2 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h2>
<h3 id="获取当前所在文件目录"><a class="markdownIt-Anchor" href="#获取当前所在文件目录"></a> 获取当前所在文件目录</h3>
<p><code>getwd()</code></p>
<h3 id="更改文件目录"><a class="markdownIt-Anchor" href="#更改文件目录"></a> 更改文件目录</h3>
<p><code>setwd(dir = &quot;C:Users/Desktop/Data&quot;)</code></p>
<blockquote>
<ol>
<li>
<p>注意“/”在编程语言中为路径地址的分割，而“\”为转义符号</p>
</li>
<li>
<p>当报错的时候要检查该路径下是否有该文件夹</p>
</li>
</ol>
</blockquote>
<h3 id="查看当前文件夹下包含的文件"><a class="markdownIt-Anchor" href="#查看当前文件夹下包含的文件"></a> 查看当前文件夹下包含的文件</h3>
<p><code>list.files()或者dir()</code></p>
<h3 id="运算"><a class="markdownIt-Anchor" href="#运算"></a> 运算</h3>
<h4 id="赋值运算"><a class="markdownIt-Anchor" href="#赋值运算"></a> 赋值运算</h4>
<blockquote>
<p>R语言定义变量无需声明类型</p>
</blockquote>
<p><code>x &lt;- 3或者5 -&gt; x或者x=3</code></p>
<blockquote>
<ol>
<li>局部变量</li>
<li>将3赋值给x，用小于号连接的减号赋值，（不推荐用等号赋值，可能与后面的假设检验冲突，也不推荐5 -&gt; x这种赋值，因为降低了代码的可读性）</li>
</ol>
</blockquote>
<p><code>x &lt;&lt;- 5</code></p>
<blockquote>
<p>这个是强制赋值（全局变量）</p>
</blockquote>
<h4 id="求和运算"><a class="markdownIt-Anchor" href="#求和运算"></a> 求和运算</h4>
<p><code>y &lt;- sum(1, 2, 3, 4, 5)</code></p>
<blockquote>
<p>将1， 2， 3， 4 ，5的和赋值给y</p>
</blockquote>
<h4 id="求均值运算"><a class="markdownIt-Anchor" href="#求均值运算"></a> 求均值运算</h4>
<p><code>z1 &lt;- mean(c(1, 2, 3 ,4 ,5))</code><br />
<code>z1 &lt;- mean(1:5)</code></p>
<blockquote>
<p>将1， 2， 3， 4 ，5的均值赋值给z1</p>
</blockquote>
<p><code>z2 &lt;- mean(1, 2, 3, 4 ,5)</code></p>
<blockquote>
<p>将1，2，3，4，5，的第一个数复制给z2</p>
</blockquote>
<h3 id="变量查看"><a class="markdownIt-Anchor" href="#变量查看"></a> 变量查看</h3>
<p><code>ls()</code></p>
<blockquote>
<p>查看当前工作区的变量</p>
</blockquote>
<p><code>ls.str()</code></p>
<blockquote>
<p>查看变量的详细信息该函数是ls()和str()的组合str()可以列出一个变量的具体信息</p>
</blockquote>
<p><code>ls(all.names = TRUE)</code></p>
<blockquote>
<p>列出以点开头的文件</p>
</blockquote>
<h3 id="清屏"><a class="markdownIt-Anchor" href="#清屏"></a> 清屏</h3>
<p>Ctrl+L</p>
<h3 id="清楚变量"><a class="markdownIt-Anchor" href="#清楚变量"></a> 清楚变量</h3>
<p><code>rm(x)</code></p>
<blockquote>
<p>清除工作区中的x变量</p>
</blockquote>
<p><code>rm(x,y)</code></p>
<blockquote>
<p>清除工作区中的x，y变量</p>
</blockquote>
<p><code>rm(list = ls())</code></p>
<blockquote>
<p>清除工作区中的所有的变量</p>
</blockquote>
<h3 id="寻找之前的命令"><a class="markdownIt-Anchor" href="#寻找之前的命令"></a> 寻找之前的命令</h3>
<p>方向键控制</p>
<p><code>history(n)</code></p>
<blockquote>
<p>列出历史记录 n为列出多少条，如不填则列出所有</p>
</blockquote>
<h3 id="保存工作空间"><a class="markdownIt-Anchor" href="#保存工作空间"></a> 保存工作空间</h3>
<p>保存为.RData文件</p>
<p><code>save.image()</code></p>
<blockquote>
<p>只会保存数据和绘图函数，图片会单独保存</p>
</blockquote>
<h3 id="退出"><a class="markdownIt-Anchor" href="#退出"></a> 退出</h3>
<p><code>q()</code></p>
<h2 id="包的安装在线安装"><a class="markdownIt-Anchor" href="#包的安装在线安装"></a> 包的安装（在线安装）</h2>
<p><code>install.packages(&quot;&quot;)</code></p>
<blockquote>
<p>引号内加入要安装的包</p>
</blockquote>
<p><code>.libPaths()</code></p>
<blockquote>
<p>显示库所在的位置</p>
</blockquote>
<p><code>library()</code></p>
<blockquote>
<p>显示库里有哪些包</p>
</blockquote>
<h2 id="包的使用"><a class="markdownIt-Anchor" href="#包的使用"></a> 包的使用</h2>
<h3 id="包的载入"><a class="markdownIt-Anchor" href="#包的载入"></a> 包的载入</h3>
<p><code>library()</code><br />
或者<br />
<code>require()</code></p>
<blockquote>
<ol>
<li>括号内填入要载入的包</li>
<li>区别是当载入一个未下载的包是require()会发出警告但是会继续执行程序</li>
<li>而library()会终止程序的运行</li>
</ol>
</blockquote>
<p>常用技巧</p>
<p><code>if(!require(&quot;cluster&quot;)) install.packages(&quot;cluster&quot;)</code></p>
<h3 id="包的帮助"><a class="markdownIt-Anchor" href="#包的帮助"></a> 包的帮助</h3>
<p><code>help(package=&quot;vcd&quot;)</code><br />
<code>library(help=&quot;vcd&quot;)</code></p>
<blockquote>
<p>包的帮助</p>
</blockquote>
<p><code>ls(&quot;package:vcd&quot;)</code></p>
<blockquote>
<p>包中所有的函数</p>
</blockquote>
<p><code>data(package=&quot;vcd&quot;)</code></p>
<blockquote>
<p>列出包中包含的数据集</p>
</blockquote>
<p><code>detach(&quot;package:vcd&quot;)</code></p>
<blockquote>
<p>将包从内存中移除</p>
</blockquote>
<p><code>remove.packages(&quot;vcd&quot;)</code></p>
<blockquote>
<p>将包从硬盘中移除</p>
</blockquote>
<h3 id="包的移植"><a class="markdownIt-Anchor" href="#包的移植"></a> 包的移植</h3>
<figure class="highlight r"><table><tr><td class="code"><pre><code class="hljs R"><span class="hljs-comment">#旧电脑</span><br>Rpack &lt;- installed.packages()[,<span class="hljs-number">1</span>]<br>save(Rpack,file=<span class="hljs-string">&quot;Rpack.Rdata&quot;</span>)<br><span class="hljs-comment">#新电脑</span><br><span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> Rpack) install.packages(i)<br></code></pre></td></tr></table></figure>
<h2 id="获取帮助"><a class="markdownIt-Anchor" href="#获取帮助"></a> 获取帮助</h2>
<p><code>help.start()</code></p>
<blockquote>
<p>打开帮助文档</p>
</blockquote>
<p><code>help(sum)</code><br />
或者<br />
<code>?sum</code></p>
<blockquote>
<ol>
<li>打开sum函数的帮助文档</li>
<li>如果搜索不都相关的文档，先需要载入包</li>
</ol>
</blockquote>
<p><code>args(sum)</code></p>
<blockquote>
<p>快速了解sum的参数，而不需要打开帮助界面</p>
</blockquote>
<p><code>example(mean)</code></p>
<blockquote>
<p>给出mean函数的示例</p>
</blockquote>
<p><code>vignette()</code></p>
<blockquote>
<p>文档更细节</p>
</blockquote>
<p><code>??qplot</code></p>
<blockquote>
<p>输入两个问号不需要加载包就可以打开函数的帮助文档</p>
</blockquote>
<p><code>help.search(&quot;heatmap&quot;)</code><br />
或者<br />
<code>??heatmap</code></p>
<blockquote>
<p>不知道函数的名字，用本地模糊搜索</p>
</blockquote>
<p><code>apropos(&quot;sum&quot;)</code></p>
<blockquote>
<p>列出所以包含sum关键字的内容</p>
</blockquote>
<p>`apropos(“sum”,mod=“function”)</p>
<blockquote>
<p>调整参数查询sum关键字的函数</p>
</blockquote>
<p><code>RSiteSearch(&quot;matlab&quot;)</code></p>
<blockquote>
<p>搜索不到或者文档过于老旧</p>
</blockquote>
]]></content>
      <categories>
        <category>语言</category>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R语言</tag>
      </tags>
  </entry>
  <entry>
    <title>刷算法的小技巧</title>
    <url>/2021/01/16/%E5%88%B7%E7%AE%97%E6%B3%95%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="空格问题"><a class="markdownIt-Anchor" href="#空格问题"></a> 空格问题</h2>
<a id="more"></a>
<blockquote>
<ol>
<li>在不少题中要求末尾无空格，所以我们要在第一个满足条件的数后无空格，而在后面的每一个满足条件的数前面加上空格</li>
<li>加空格有两种方式，一种是利用题中的循环条件来，另一种是自己创建一个条件</li>
</ol>
</blockquote>
<p><em>例1、在PTA_Basic_Level 1062 最简分数中</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">while</span>(n1 * k &gt;= m1 * num) num++;<br><span class="hljs-keyword">while</span>(n1 * k &lt; m1 * num &amp;&amp; m2 * num &lt; n2 * k)&#123;<br>	<span class="hljs-keyword">if</span>(gcd(num, k) == <span class="hljs-number">1</span>)&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%d/%d&quot;</span>, flag ? <span class="hljs-string">&quot; &quot;</span> : <span class="hljs-string">&quot;&quot;</span>, num, k);<br>		flag = <span class="hljs-literal">true</span>;<br>	&#125;<br>	num++;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>建立一个bool类型的变量flag并让其为false，在打印的时候运用三目运算符来判断如果为flase则输出空字符&quot;“如果为true则输出” &quot;，即达成第一个数后无空个的要求。</p>
</blockquote>
<p><em>例1、在PTA_Basic Level 1066 图像过滤</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>		<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;temp);<br>		<span class="hljs-keyword">if</span>(temp &gt;= a &amp;&amp; temp &lt;= b)<br>			temp = num;<br>		<span class="hljs-keyword">if</span>(j) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%03d&quot;</span>, temp);<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>运用循环条件j当j不等于0的时候来输出空格</p>
</blockquote>
<hr />
<h2 id="多行数据"><a class="markdownIt-Anchor" href="#多行数据"></a> 多行数据</h2>
<p><em>B1066</em></p>
<blockquote>
<p>不一定用数组储存每一行的数据，可以优先考虑边输入，边处理输出</p>
</blockquote>
<hr />
<h2 id="多点测试输出到文件尾"><a class="markdownIt-Anchor" href="#多点测试输出到文件尾"></a> 多点测试（输出到文件尾）</h2>
<blockquote>
<p>与之对应的是单点测试，区别在于多点测试只执行一次代码则要验证所有数据，单点测试则是每次验证一组数据，执行多次。</p>
</blockquote>
<p><em>B1010</em></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//方式一</span><br><span class="hljs-keyword">int</span> a, b;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;&#125;<br><br><span class="hljs-comment">// 方式二</span><br><span class="hljs-keyword">int</span> a, b;<br><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b)) &#123;&#125;<br><br>方式三<br><span class="hljs-keyword">int</span> a, b;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b) != EOF) &#123;&#125;<br><br><span class="hljs-comment">//方式四</span><br><span class="hljs-keyword">int</span> a, b;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b) == <span class="hljs-number">2</span>) &#123;&#125;<br></code></pre></td></tr></table></figure>
<hr />
<h2 id="字符串吸收换行符"><a class="markdownIt-Anchor" href="#字符串吸收换行符"></a> 字符串吸收换行符</h2>
<p><em>B1067</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-built_in">string</span> password, temp;<br>	<span class="hljs-keyword">int</span> n;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; password &gt;&gt; n;<br>    getchar(); <span class="hljs-comment">//吸收换行符</span><br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;; i++)&#123;<br>		getline(<span class="hljs-built_in">cin</span>, temp);<br></code></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>注意在<code>cin &gt;&gt; password &gt;&gt; n;</code>后面要加一句<code>getchar();</code>来吸收换行符，不然会用for循环里的<code>getline(cin, temp)</code>吸收。会减少一次循环</li>
</ol>
</blockquote>
<hr />
<h2 id="倒序输出一个数"><a class="markdownIt-Anchor" href="#倒序输出一个数"></a> 倒序输出一个数</h2>
<h3 id="前面无0形"><a class="markdownIt-Anchor" href="#前面无0形"></a> 前面无0形</h3>
<h4 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h4>
<blockquote>
<ol>
<li>利用循环</li>
<li>可以做成函数返回</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> sum, n;<br><span class="hljs-built_in">cin</span> &gt;&gt; sum;<br><span class="hljs-keyword">do</span>&#123;<br>	n = sum % <span class="hljs-number">10</span> + n * <span class="hljs-number">10</span>;<br>	sum /= <span class="hljs-number">10</span>;<br>&#125;<span class="hljs-keyword">while</span>(sum);<br><span class="hljs-built_in">cout</span> &lt;&lt; n;<br></code></pre></td></tr></table></figure>
<h4 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h4>
<blockquote>
<p>利用string字符串倒序</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-built_in">string</span> s;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; s;<br>	reverse(s.begin(), s.end());<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, stoi(s)); <span class="hljs-comment">//stio()将n进制的字符串转化为十进制</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="前面有0形"><a class="markdownIt-Anchor" href="#前面有0形"></a> 前面有0形</h3>
<h4 id="方法一-2"><a class="markdownIt-Anchor" href="#方法一-2"></a> 方法一</h4>
<blockquote>
<ol>
<li>利用循环</li>
<li>直接输出形</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">do</span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; n % <span class="hljs-number">10</span>;<br>	n /= <span class="hljs-number">10</span>;<br>&#125;<span class="hljs-keyword">while</span>(n);<br></code></pre></td></tr></table></figure>
<h4 id="方法二-2"><a class="markdownIt-Anchor" href="#方法二-2"></a> 方法二</h4>
<blockquote>
<ol>
<li>利用数组储存倒序的数字</li>
<li>然后倒序输出即可</li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n, k = <span class="hljs-number">0</span>, q[MAXN];<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">do</span>&#123;<br>	q[k++] = n % <span class="hljs-number">10</span>;<br>	n /= <span class="hljs-number">10</span>;<br>&#125;<span class="hljs-keyword">while</span>(n);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) <span class="hljs-built_in">cout</span> &lt;&lt; q[i];<br></code></pre></td></tr></table></figure>
<h4 id="方法三"><a class="markdownIt-Anchor" href="#方法三"></a> 方法三</h4>
<blockquote>
<ol>
<li>利用string字符串倒序</li>
<li>与上面的前面无0形相比只是没有调用stoi()函数</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-built_in">string</span> s;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; s;<br>	reverse(s.begin(), s.end());<br>	<span class="hljs-built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr />
<h2 id="为什么要对1000000007取模"><a class="markdownIt-Anchor" href="#为什么要对1000000007取模"></a> 为什么要对1000000007取模</h2>
<blockquote>
<ol>
<li>大数阶乘，大数排列组合等，一般结果都会要求将输出结果对1000000007取模（取余）</li>
<li>1000000007是一个质数，对质数取余能最大程度避免冲突</li>
<li>int32位的最大值为2147483647，所以对于int32位来说1000000007足够大</li>
<li>int64位的最大值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>6</mn></msup><mn>3</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^63-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，对于1000000007来说它的平方不会在int64中溢出所以在大数相乘的时候，因为<code>(a * b) % c = ((a % c) * (b % c)) % c</code>，所以相乘时两边都对1000000007取模，再保存在int64里面不会溢出。</li>
</ol>
</blockquote>
<hr />
<h2 id="最大公约数"><a class="markdownIt-Anchor" href="#最大公约数"></a> 最大公约数</h2>
<h3 id="递归法"><a class="markdownIt-Anchor" href="#递归法"></a> 递归法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a % b ? gcd(b, a % b) : b;<br>&#125;<br><span class="hljs-comment">//或者</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="辗转相除法"><a class="markdownIt-Anchor" href="#辗转相除法"></a> 辗转相除法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> temp, a, b;<br><span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;<br><span class="hljs-keyword">while</span>(b)&#123;<br>    temp = b;<br>    b = a % b;<br>    a = temp;<br>&#125;<br><span class="hljs-keyword">return</span> a;<br></code></pre></td></tr></table></figure>
<hr />
<h2 id="对应关系"><a class="markdownIt-Anchor" href="#对应关系"></a> 对应关系</h2>
<h3 id="一对一"><a class="markdownIt-Anchor" href="#一对一"></a> 一对一</h3>
<h4 id="方法一map映射"><a class="markdownIt-Anchor" href="#方法一map映射"></a> 方法一map映射</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; m;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="方法二结构体"><a class="markdownIt-Anchor" href="#方法二结构体"></a> 方法二结构体</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span>&#123;</span><br>	<span class="hljs-built_in">string</span> s;<br>	<span class="hljs-keyword">int</span> n;<br>&#125;stu;<br></code></pre></td></tr></table></figure>
<h4 id="开辟数组"><a class="markdownIt-Anchor" href="#开辟数组"></a> 开辟数组()</h4>
<h5 id="方法一动态数组"><a class="markdownIt-Anchor" href="#方法一动态数组"></a> 方法一动态数组</h5>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vecotr&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	vecotr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">array</span>;<br> 	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="方法二数组"><a class="markdownIt-Anchor" href="#方法二数组"></a> 方法二数组</h5>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">//开辟较小的时候</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> maxn = <span class="hljs-number">10001</span>;<br><span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[maxn]; <span class="hljs-comment">//开辟较大的时候在main函数外开辟，因为较大的数组会占用较大的内存，防止爆栈。</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="一对多"><a class="markdownIt-Anchor" href="#一对多"></a> 一对多</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; m; <span class="hljs-comment">//相当于用动态数组做了一个“多”</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr />
<h2 id="txt输入"><a class="markdownIt-Anchor" href="#txt输入"></a> txt输入</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	freopen(<span class="hljs-string">&quot;input.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>); <span class="hljs-comment">//可以不用重复粘贴，提交的时候注释掉即可。</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr />
<h2 id="c使用printf输出string类"><a class="markdownIt-Anchor" href="#c使用printf输出string类"></a> C++使用printf输出string类</h2>
<blockquote>
<p>利用s.c_str()函数。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">string</span> s;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s.c_str());<br></code></pre></td></tr></table></figure>
<h2 id="c中string字符串前补0"><a class="markdownIt-Anchor" href="#c中string字符串前补0"></a> C++中string字符串前补0</h2>
<blockquote>
<p>利用insert函数</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">string</span> s, s1;<br>s1.insert(<span class="hljs-number">0</span>, s1.length() - s.length(), <span class="hljs-string">&#x27;0&#x27;</span>);<br></code></pre></td></tr></table></figure>
<hr />
<h2 id="n个点直接距离最小和对应的点"><a class="markdownIt-Anchor" href="#n个点直接距离最小和对应的点"></a> n个点直接距离最小和对应的点</h2>
<blockquote>
<p>将n个点从大到小排序，n为奇数的话点为最中间的那个点，n为偶数时候点为最中间两个点中的任意一个。该结论用绝对值不等式来证明。</p>
</blockquote>
<p><a href="https://www.acwing.com/problem/content/106/">104. 货仓选址</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n, ave;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">array</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">cin</span> &gt;&gt; <span class="hljs-built_in">array</span>[i];<br>    sort(<span class="hljs-built_in">array</span>.begin(), <span class="hljs-built_in">array</span>.end());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) ave += <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">array</span>[i] - <span class="hljs-built_in">array</span>[n / <span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ave &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="对拍"><a class="markdownIt-Anchor" href="#对拍"></a> 对拍</h2>
<h3 id="windows下对拍"><a class="markdownIt-Anchor" href="#windows下对拍"></a> Windows下对拍</h3>
<blockquote>
<ol>
<li>一个数据生成器代码data.cpp写好之后编译成data.exe</li>
<li>一个自己的代码my.cpp编译成my.exe</li>
<li>一个暴力解决的代码std.cpp编译成std.exe</li>
<li>再写一个对拍.bat</li>
</ol>
</blockquote>
<p>eg<br />
  设一个数 A 的最低 D 位形成的数是 ad。如果把 a​d截下来移到 A 的最高位前面，就形成了一个新的数 B。B 是 A 的多少倍？例如将 12345 的最低 2 位 45 截下来放到 123 的前面，就得到 45123，它约是 12345 的 3.66 倍。</p>
<p>输入格式：<br />
输入在一行中给出一个正整数 A（≤10^​9）和要截取的位数 D。题目保证 D 不超过 A 的总位数。</p>
<p>输出格式：<br />
计算 B 是 A 的多少倍，输出小数点后 2 位。</p>
<p>输入样例 1：<br />
12345 2</p>
<p>输出样例 1：<br />
3.66</p>
<p>输入样例 2：<br />
12345 5</p>
<p>输出样例 2：<br />
1.00</p>
<blockquote>
<p>对拍.bat</p>
</blockquote>
<figure class="highlight bat"><table><tr><td class="code"><pre><code class="hljs bat"><span class="hljs-built_in">color</span> B<br><span class="hljs-built_in">echo</span> off <br>:loop<br>	<span class="hljs-built_in">echo</span> 已运行<span class="hljs-variable">%a%</span>次<br>	<span class="hljs-built_in">set</span> /a a+=<span class="hljs-number">1</span><br>	rand.exe<br>	my.exe<br>	std.exe<br>	fc my.out std.out<br>	<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">errorlevel</span> <span class="hljs-number">1</span> <span class="hljs-keyword">goto</span> loop<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p>my.cpp</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	freopen(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>); freopen(<span class="hljs-string">&quot;my.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>	<span class="hljs-built_in">string</span> s;<br>	<span class="hljs-keyword">int</span> n;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; s &gt;&gt; n;<br>	<span class="hljs-built_in">string</span> res = s.substr(s.size() - n, n) + s.substr(<span class="hljs-number">0</span>, s.size() - n);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f&quot;</span>, <span class="hljs-number">1.0</span> * stoi(res) / stoi(s));<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>std.cpp</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	freopen(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>); freopen(<span class="hljs-string">&quot;std.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>	<span class="hljs-built_in">string</span> s;<br>	<span class="hljs-keyword">int</span> n;<br>	<span class="hljs-built_in">cin</span> &gt;&gt; s &gt;&gt; n;<br>	<span class="hljs-built_in">string</span> ans = s.substr(s.length() - n, n) + s.substr(<span class="hljs-number">0</span>, s.length() - n);<br>	<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a = stoi(ans), b = stoi(s);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f&quot;</span>, a * <span class="hljs-number">1.0</span> / b);<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>rand.cpp</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	freopen(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>	srand(time(<span class="hljs-literal">NULL</span>));<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1e3</span>; i++)&#123;<br>		<span class="hljs-keyword">int</span> x = rand() % <span class="hljs-number">1000000000</span> + <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">int</span> n = x, sum = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">while</span>(n)&#123;<br>			sum++;<br>			n /= <span class="hljs-number">10</span>;<br>		&#125;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= sum; j++) <span class="hljs-built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>page</title>
    <url>/2021/03/07/page/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>常用网站</title>
    <url>/2021/01/11/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bccefdfe8341f0b5ce4dcd4930c3b07f20ea6905a4a678b43268f135829c681f">51a7fedf40e220e431f55d7f94a97989593a91e25e3e742f93477303727f0b30d760b253009de657b9065c0541604dc135efff6e20c3fafdbe5c5a351a593567c0c311cd292d2344e8514e6d9c175a1dad532dce3b44bd9010334199896b25140dea59b486b2af1571b9f558ec3bb25264e408590e52303ae5c8ccae94b0834cb77864ae30781590f9c083959357da845898814b763601ded037597b9cf7285e7710d830adeed4d6ffb32067a9de4f186836c8b8708f189bf4ec25e0a356af68473d6b82d148e78126445668e1b5de4a5f97419579db1a0465cd9a3d0245057b77cba88f547b93135d84bf4804fe0867ba06ae328d2e37250de16e40511a9adbb3518bbf8444da79d2ba5e19790184dd28a70da6cf1a7099d49f685f4cf3852635ee6cea4393f5e914199e5e9120c444c36d1221a9ee57e6f3d39088926a4c62ee5cd994eef32d7ccf38a45b237b219c9db41eaecae4f95b2aa0acc7285a8e7013c8e3e1532f6beda44c354d0350342f69f4c349cf2a76e0d3d2ab1d8e208a59bc3daa0d9dd7ef71b1ea4cfd62bd30b101626fb4ff91847fb9dd40a6abb0a9b78a721b24831f52186317f61d6e3243f2e8448f3057a46fcae2f61d9c0009aa099073269dc94c7c8075038ee4d36f5d4d6c1bc9c91709f492269e3cfea228f4e6c02e83fd4f9d19594d1d1160fa0388b80bf71dc411bd737fbc1b35d6bb5c113c3adf1d196def33c4877ad7c3ba29e69262b9852a7e7b579762255cf727b69ab637d58fd705a5155519c8e0c28d968d85ed487433615cb5a61564ac2ce28fb65b8c2042736275b1bbf514d2059c02518b37a254633c9b9cd9b5f03b96584cca72fd99834233ea503b256eb1eae95828471bcab88435889ffcd554de8ea60f638731ca40936d94399387fdb4057b5fecb992c01788ad6320f8215ad91a1c000aaf5cc1bd52c6cf22f730dc2c1cc4503e6e532a7f887704bea13cff9c1c9d661421f29589d5c1565fb52728eb846866da12d8203a926f93a4d9bbfea0624e092e6af8a843eaf7acc49d270e9670b074864874ba7ed0c8af7022a94cf62b4f1a11e8689bf2beef8e96b9a482a1ad18fbe7033d5575173a476a8c7ba2ae3c52e29106f6135d8fe0401aade489ffca16a3f61ce49993d378c9431f33f0928bb127a37253659e82813f7ba8d1579dbdc87ab2c592b1f5ff616ba3c313e53c773fe976ab56b3cb6fc98c50669e3d6794bb9642992bdf92274a9cc5136ce3fd8ec162cb62aa5ce093893d8b956e194b1a4f56c06434e7f0661d77c316a26b91c465235790521fd67d6223b95896992e9d6588372e9f23a4c4ef288eb4679dbd6a28efe7709d5525e7b92a426406533dd5d1900cb96a1981860f9b17a4a30dca8d5b1ea8ff6b9999d5fcd30cf5185054ebb84a449253ebc8d82d6312b1b7a9393eb0c93284c76d3181b8a7319dfe26aff726d9508ffa11e3c5af9a38a75f996cff3efdf1e68e13618be7b11ce0200ab039fde97d904ef02e0613a4fa0dc9ff2cbc12f9e4a15ffb0e252dcc8e618cb28431ef75cd1c1b1c0cfd4d48e497a0c1d1e30a8b57f71f08e6d0d81e0d7844a939d3998a80271ce81c442819349ac615abd3bbb3911738f61e81704164ce4e3d75338993557482400db10f32137adfcfbd94cf6b433a5bc8116da61b8cd1d18d9529b4471a0a293ad713b29a8938db73b0fe35b5741929f2aa98a3f5433093054a51d0b0ae6ef3751db41eadb56f4c2cf2f66608cd058f673009b1b8f1e349d4285809fbd8b06db0a5be4eb39c3282f69cab1b1ad7e70be1b9abe96cc868a532ff8dec612c40401e5b18a4e04e21d90f31d169f974138e4e1ec4b6db948bdd4f8e1518728608dfd08bb651f98c4037c14bd5aba98899af86795a79d28ff3b52ba54e6ea496d34dc971a9044b10befc8c4ec5e5b0e1383b2a7c909dbf38f7ab78a8de9a757bf1303c791e6b206819bcd31ef48c8d158ccff5e9ecc45057490993bd15b9a3c24441e1a8c30b2e4a269d021256b567241445e81d41381d32435bda2563fa01c009fa895485b2e81a049b86020d9a18ba0abea70f17cd26c873ab65e98ea2426521e9209ee04e61f9653c13ad4351c9657cb42c7dcadb253a5329d9a566420a282757382adefcd06d7a07e63415290f49224ab66a69d691d791a443f96780e18f9273fe822c5b40d253c6e30a14f0fe7c8ab2da6b69039b7bb504edadb16d209bfe923a8d3d7d284d4e2d1fc7cb494ff7d165d1959ca2ee72a33b2fe0da42965e039987b5b5f233e0a996fea41275ddec3146dfd14f9063559e301c7f5ecb22c1b3cd8ec8ee9574286f3fb649f7d73372b1f210fe29156c978d965c3ae2e2003d1c1b26582b9e52167681939f21ef41307351e5887764b47c7ed3ba147efcd63f9e63424cc84f17c955584a98e2e7c73bad1e385b56152150cf0df6d432072819e6abf0624d23e711e61eaa7c34761247f575fa3e925f27c0a9f3cbd76e02149cbb8d32331b792463b85ffaa597bbfa9d73c87d491a31650c2dbfecd1034525ac3d54fc622d6e382a3bbffc932527f5414e19b1340c0d7c707760a4c548cbfca3bd480af4af7658df20dd02d8ed586b8eea85bb347eb1e183c7d3db5ae98af8e091819d191bd4d172926d895a8ac5b1573511ac12ce579e0c629b1d1efab791a1f5e3b061562f97bda2442b783190baf993e40d2ff5d1e9b9b294c779d864441f7ccaad9e68c387e76f1b353c21de783c9510f423380ab47e60df56c63af88ef591f4d0c5f9e9da951d139b6576de24e9ac4ec2d745f913d48af0cf37eccb56147ac9117224d12c4f59f980392fc28e995f8c746ca5b39943a409ec9086b300d908eabc05a1af99115abd92b9fa9a8a76a54f29d3050fc6d097282aed2a1b0f56669d29426a55427616174e480bf2c672bad232c296a52f883fa52edc9216533dd0d5e13a218117e12b19be8cb455d1d965238efab03b4b584242a019316c772e35bbfa3bb46e4115ab03593ba944dc44c010d1e36eb0d27c73e3a042386119af530c0a56f40367e695df39a2e0a45a68c75105b4b2e3f8fd4a4e248af3873e2a85894caec8768a159c4f90dd132c6dbbe720a869749a065f112b2648dcc1b5e71deaedcecf3a6b781d86a0ec37cd3b3179a15be2fee6a8fe79e0a5939e4f9111e7567eac44b72fc3f2b8f96d48d907ae2021fc2f79aed0898dad7aa148d1f9a68b4c4c8e0534a4fea80d90a742377821d567c9e22f2cf4c112d46ff1e5ed7ac23aa421961ac2bbc58d83c2f81b86ed5b32b1dd741f3586655ba5ab6108b4ed91003664e748a468e6ed73a5e2535839161e54b4250ff952fb0c15d5fd0f1a6b71a32ce366b1b34e8ae3e74029c74cc44d6afdcbb4d09dc6416b13c2c39fe9f1ce0c652198fc33b09b775a7c59a95f624ae13fe158a96e7c46f0d71ba1124f781d27109c8ca8d74641a8ba4876842b7ce7b2652bc36071f0965af90ffa7b0bfdbb6126088c8356ec82edd79baf4a38c47993384015848789e84617b6a8a4684be19e05bb2dd10291390e92fa593d8ef3a9bda7487f6785512e043f370242ee9db13cc3716d3047ef9e1ecce1a4cb3b1b49ace894c4695a5cabc1188e681203847bb70e8fc6dee2f01f224a1eee0adb9aa1e58d488909373539bb9db0667411e46b8ec8544cc16db9d11de50c11ff4b13b73f10e3b05becec19d4b5d96732906b4d9239c95101b5decb7bb1ef9b0d5169ac10e7ed6c05cdbe73da07b5d8f6f0ca46227f3cf3b4cb7fc71722607c0870cd2f64067f0601d5ceb816c4389154c602c6f5bc99887a611235c967d443766239d244120e374bd184499397ca416a14f51d70902c6d794fb8a44e0c64653159a9a76f98f6b40e6c35c0f8bde2a0fd0b961c2805eec8d67ac32cc2f662e54411752315f3ba833d6eb6a56f2f6f9678d8def00f73331f7747dbb18eb80f907efc06d9981d8fa0a0f7814972ccb1fffd3d77cb6d50fba6dac3b30acdf07f923109645d1f082c1dbe1243e55925d8213690362a284007a599ece1a517844ec347364b2fd3e317a8f266395d7460abc74098ba8fa95b8e6fdb3795f7e828e286196053a395aa544eca27ccd4428c580508960a17975d6ada5cdb8e97148f07545ff4dac5e335bdff02f3812ca99aca539bb0c205c39b5c1515fce36174d4c5721ca3f553879198a6fe642ad0d5edbb6ea714721f767ba77a52afc70988de0b490d6005f083d44824128bb2f1ae9dd79c07ceb847631ddf55de43c7a653bfc9e89bdfb92622ff0cddf0a60e712f785daa682ecabd94d6bba5e2e4cd2476652d8e95e0a99d613cd2b613859a87e5b1ad42f8ce94cc54805113fff10f349e7c522a5d00cb99467ca9fc5b189124fe3cee838bf3e8087e8a7965acaeb1b1e2d36f0080ee5ff53a8039124e6882c8b9b60cf82ee56cf8e313e0dad4e0226f2a2a8cb753805f622765f1d0bd0c073ded552bee4e481acb2f61f121400b8e797db96f2bd3f2c68bd54154d10688defde6116707cbf94d1c2a560bb2cefb21b565c72457de51bcda6a3af00bc43f194b1d2d3c672b9db86cf8ff590396608f535b6fb522786d5a1b58bd4e04fe563c51e9f5887966db8c1df2c8bb9463368f97f585b3c77645680c3663ab524b013f39aad01186e9c1290f12dcc620fe86343dcdfe87b75fe626a23b9eb2253dae9725323cf2d615920cca2401bbbb31eeae628de651c0e1154e7e737035c3484119809ac261aa1b2b095489a1cda608b0f0f4feb9ba0ea40128ad2e4500c86c515fa9b195e28717c8df5b1c4256084ca1e4fc0944111ffa5ba21eb9a2c96a8db73f7a24e6a1f5090e2a09f869017ed42849c76228105e54792ff1ba2c953559f4d985535162a5d419b93f967f6da9b5c94e45c2443deca2f5737e796e24585b3ca2c1ce6342c570b2d550d255bbad21159dbde08d71b133b90cf06a46cc5bc1bd125550806cfd4c6bc75be20acbbd3ae9806b9214c77831a8b2b1c3cd1bb97cc79c4acd4690ab1801bfbaf604fa560e3c374ce8a38005d4d1a19a855f4cc595252bad0fea6a1110d3afad816a462bb0c1a48a2eed55e4b5e71ff962ead1b781267ffc41d7b1ddf8bffb9f87b7f2ce2d23140d99b16add7a483fc9446596bd85b0de9faafd16edba9432b04f86fbfdb613412bbb57d28d0aa945e3885a69c64e11f444af83d3b2c17aa78923573cc0156409282dec8b26a0663242a5bc3e832feca4dc822584b197db1c981d41e98f0f0f36937bfe3921fd40fa5430b7a4cc21ac6fa0559a344398312739063dd9f10126d3334a52ee493315f9f5b5b4e56356fae79c4607d17e8938b9bb8f97622eb60e34ba685ceb5c3ce7f0e9a3202292c9d3cc0d79541a1be4c21e512711d94b7d9e31a4d88b4f74aae0df1e111ceab18ceda4d9dc32c446bddbf5a5b3099368a8fe0e8447a1d171d342f1c8c101ca8e18532abaff2098bed5fabb015d87eda6a6f2737d648db071ccc6a57a06143c6a5b5a387b7a307af76912155c1bdd1e1187b19d654a191a44d24745839856a0af93e61db6d154baea433a9ace9f640498b9c3ced45606ab9c0aeb81f5a7b3c6933a6d52b8d36336444f28a35ff9ae13703a84eef27c1266e2e8eba233c6685543b057eb183443f75255211a4fdcb7e081817fbf7b72c45f4be62b2844f99b952a348178f1b5935fa089f3703b020387be2622abb0452ff56d12d46c050ceb2809c718dd931ff494caba519bd348f99beafd70e4a90f14f8ac5edc6a40b31ff1c07e9e0f1f0f9cfdfd5e08676b9ef76461d448a4f275a0ed4f47e8d28725312f1b56b333dc59b7d9736131702862f1111ec43b4d9a16702a0cb19da956655352d1300f39067eed43b0020e6061542e20e926e688ca1746b77d0f2ab18322f54fd34ebb818bb13ed6d29defd107eeef5fa34ef117eb9e24e9777deab372f149cd45b11accf904488c7ec1564d4edb84372f400e0408727b32c47e342b71f68c4b6c349b21268e8fccdca6b46432c39cfc4bab1cc0379887bd2102c1b5fe75377880e726a7efc4e6c379c85862d979b1efbca683f3f875137f0e3f6c326f7ebd29bef58cbf72ba3877fc054caa6b40ef964c9bd74d87a75cd3c49a8bfffe96d3b29b78b75357601bad1331a79b7f53d0618e91bc2062b4664a39b0b5db42b0812c839ad6bebeeef7b4f7af77c7917a0acd58783269b73c86dd2a5ae22b5187dbdb4d11cb21173b09d1b717dba6a6a6d61dc7316cf98f26c7a420cb3158832301fc3132a7b0af94052e5b217c819acd2255236cd6e96d2cda31ea8cb289f5d79073a37c19bda513dc1b183343ec4079288ba7199a97c960b1ff37a03f7325df5f8c04a034a1cc677d99f137cf8e3a078e2874d042a1fe77fc2d3bb36d4b6793eec8f9b232c29a8e4ec71d622ce757bb29fbe9bd3a7b025763a6efef2dc4afcd94bcf41973b1eb60ce84b01a58729d2481616c4dd87e5a1aa00550b0adfc064152f3087441b7e278503786c3750b572c09d34415c35f4cd7e695e364a752ca493c79d602310cab2c4efe8f99207f92ae5caeb9a15f2748eec8f530381deb7e53064cea8cb19034e3c00570160ab565497bb7b69a538e6c2089595442694e67523afe2bd9a03add6598101a66646dcdb3c3f78f0b99a153c2267cf050f6084e14a82bce0b1f12dc58d9b21628ff6340e6d4f7f9529bfdb63d81ff132491079a6a345d92a237f003a03ed2bcfc2aa62237d5363dae24575829c1580ddac57b88571460539db190505141ab26094db24372c8b6bb7ed0abf3b79f81a00c96ccb7e592dc679917bc9b3d74b067e9f595313efec7b6f0f144e8f78cc14e269af85db074396d16399dcaaf72090382f8ae4186afb142ac1745607716a61bd883010b2e1c40fe338b25e12f4f1d9bc965b283bd37eb5784d3a6386d6b797fe9481ec2df48d4c60ec8d84fc6f4a588ee553e1573581e27510de2ad4e6ec9be2bea8bf76ab2f01890625052df2567d408a8bf159110499a8a4bd33df8b231837071eaed4011fbba92743a2ed5aa115b82844884512e296ff02cf65976617cae09125229297ca7e11ddeaaa963b292909e19c6bae7c426f81b9eae183e5cba78f5da3d17e2b97a65d1cd251321dd887e32d7b9aa80946f918c7482917fc6ccfe58d9fd20866fe6d7ec6def4255ed1731aebc26de6219e9288089e595bd8be29d50c922836c366283478d43e0fc992d30e242103826</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>合集</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基础</title>
    <url>/2021/02/08/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="基础算法"><a class="markdownIt-Anchor" href="#基础算法"></a> 基础算法</h2>
<a id="more"></a>
<h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//模板一</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[], <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = L, j = R, x = q[L + R &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(i &lt;= j)&#123;<br>        <span class="hljs-keyword">while</span>(q[i] &lt; x) i++;<br>        <span class="hljs-keyword">while</span>(q[j] &gt; x) j--;<br>        <span class="hljs-keyword">if</span>(i &lt;= j)&#123;<br>            swap(q[i], q[j]), i++, j--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(L &lt; j) quick_sort(q, L, j);<br>    <span class="hljs-keyword">if</span>(i &lt; R) quick_sort(q, i, R);<br>&#125;<br><span class="hljs-comment">//模板二</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[], <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &gt;= R) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> i = L - <span class="hljs-number">1</span>, j = R + <span class="hljs-number">1</span>, x = q[L + R &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>        <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span>(q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span>(q[j] &gt; x);<br>        <span class="hljs-keyword">if</span>(i &lt; j) swap(q[i], q[j]);<br>    &#125;<br>    quick_sort(q, L, j), quick_sort(q, j + <span class="hljs-number">1</span>, R);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[], <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &gt;= R) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> mid = L + R &gt;&gt; <span class="hljs-number">1</span>;<br>    merge_sort(q, L, mid), merge_sort(q, mid + <span class="hljs-number">1</span>, R);<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>, i = L, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= R)<br>        q[i] &lt;= q[j] ? tmp[k++] = q[i++] : tmp[k++] = q[j++]; <span class="hljs-comment">//q[i] &lt; q[j]选第一个是为了保证稳定</span><br>    <span class="hljs-keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];<br>    <span class="hljs-keyword">while</span>(j &lt;= R) tmp[k++] = q[j++];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = L, j = <span class="hljs-number">0</span>; i &lt;= R; i++, j++) q[i] = tmp[j];<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>归并排序与快速排序中的第一步的选取区别为，归并排序选取的中间下标值，而快速排序可以选取数组中的任意值。</li>
<li>归并排序与快速排序都是基于分治思想</li>
<li>快速排序交换次数少，归并需要开辟两个数组</li>
<li>归并排序如果序列中有两个及以上是相同的那么选取第一个因为归并排序是稳定的</li>
<li>快排也可以变为稳定排序，把下标也放进来。</li>
</ol>
</blockquote>
<h3 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h3>
<blockquote>
<p>整数二分</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//模板一</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;&#125; <span class="hljs-comment">//检查x是否符合规则</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span>&#123; <span class="hljs-comment">//右面的都符合规则</span><br>	<span class="hljs-keyword">while</span>(L &lt; R)&#123;<br>		<span class="hljs-keyword">int</span> mid = L + R &gt;&gt; <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">if</span>(check(mid)) R = mid;<br>		<span class="hljs-keyword">else</span> L = mid + <span class="hljs-number">1</span>;<br>	&#125;<br>	<span class="hljs-keyword">return</span> L;<br>&#125;<br><span class="hljs-comment">//模板二</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span>&#123; <span class="hljs-comment">//左面的都符合规则</span><br>	<span class="hljs-keyword">while</span>(L &lt; R)&#123;<br>		<span class="hljs-keyword">int</span> mid = L + R + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">if</span>(check(mid)) L = mid;<br>		<span class="hljs-keyword">else</span> R = mid - <span class="hljs-number">1</span>;<br>	&#125;<br>	<span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>浮点数二分</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span>&#123;&#125; <span class="hljs-comment">//检查x是否符合规则</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">bsearch_3</span><span class="hljs-params">(<span class="hljs-keyword">double</span> L, <span class="hljs-keyword">double</span> R)</span></span>&#123;<br>	<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1.0e-6</span>; <span class="hljs-comment">//eps表示精度,根据经验值保留k位小数则为1.0e-(k+2)</span><br>	<span class="hljs-keyword">while</span>(R - L &gt; eps)&#123;<br>		<span class="hljs-keyword">double</span> mid = (L + R) / <span class="hljs-number">2</span>;<br>		<span class="hljs-keyword">if</span>(check(mid)) r = mid;<br>		<span class="hljs-keyword">else</span> L = mid;<br>	&#125;<br>	<span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>整数二分和浮点数二分的区别是浮点数二分不用考虑边界<br />
两个整数二分模板视分析而定<br />
二分不是只有单调才可以用，只要符合规则就可以。</p>
</blockquote>
<h3 id="高精度"><a class="markdownIt-Anchor" href="#高精度"></a> 高精度</h3>
<h4 id="高精度加法"><a class="markdownIt-Anchor" href="#高精度加法"></a> 高精度加法</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//模板一</span><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">big_add</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s1, <span class="hljs-built_in">string</span> s2)</span></span>&#123;<br>	<span class="hljs-keyword">if</span>(s1.size() &lt; s2.size()) <span class="hljs-keyword">return</span> big_add(s2, s1);<br>	s2.insert(<span class="hljs-number">0</span>, s1.length() - s2.length(), <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-built_in">string</span> s = s1;<br>	<span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s1.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>	   	s[i] = (s1[i] + s2[i] - <span class="hljs-number">96</span> + cnt) % <span class="hljs-number">10</span> + <span class="hljs-number">48</span>;<br>	   	cnt = (s1[i] + s2[i] - <span class="hljs-number">96</span> + cnt) / <span class="hljs-number">10</span>;<br>	&#125;<br>    <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">0</span>) s = <span class="hljs-string">&quot;1&quot;</span> + s;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-comment">//模板二</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">big_add</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;A, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;B)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(A.size() &lt; B.size()) <span class="hljs-keyword">return</span> big_add(B, A); <span class="hljs-comment">//这句直接返回是一个好的方法不用引入第三变量。</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; C;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.size(); i++)&#123;<br>        t += A[i];<br>        <span class="hljs-keyword">if</span>(i &lt; B.size()) t += B[i];<br>        C.push_back(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t) C.push_back(t);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">string</span> s1, s2;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; A, B;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s1.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) A.push_back(s1[i] - <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s2.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) B.push_back(s2[i] - <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">auto</span> C = big_add(A, B);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = C.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-built_in">cout</span> &lt;&lt; C[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="高精度减法"><a class="markdownIt-Anchor" href="#高精度减法"></a> 高精度减法</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//模板一</span><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">big_sub</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s1, <span class="hljs-built_in">string</span> s2)</span></span>&#123;<br>	<span class="hljs-keyword">if</span>(s1.size() &lt; s2.size() || (s1.size() == s2.size() &amp;&amp; s1 &lt; s2)) <span class="hljs-keyword">return</span> big_sub(s2, s1);<br>	s2.insert(<span class="hljs-number">0</span>, s1.length() - s2.length(), <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-built_in">string</span> s = s1;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s1.size() - <span class="hljs-number">1</span>, cnt = <span class="hljs-number">0</span>; i &gt;= <span class="hljs-number">0</span>; i-- )&#123;<br>	    cnt = s1[i] - s2[i] - cnt;<br>	    s[i] = (cnt + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span> + <span class="hljs-number">48</span>;<br>	    cnt &lt; <span class="hljs-number">0</span> ? cnt = <span class="hljs-number">1</span> : cnt = <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span>(s[k] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; k &lt; s.size() - <span class="hljs-number">1</span>) k++; s.erase(<span class="hljs-number">0</span>, k);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-comment">//模板二</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; A, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(A.size() != B.size()) <span class="hljs-keyword">return</span> A.size() &gt; B.size(); <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = A.size(); i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span>(A[i] != B[i]) <span class="hljs-keyword">return</span> A[i] &gt; B[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">big_sub</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;A, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;B)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!cmp(A, B)) <span class="hljs-keyword">return</span> big_sub(B, A);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.size(); i++)&#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.size()) t -= B[i];<br>        C.push_back((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back() == <span class="hljs-number">0</span>) C.pop_back(); <span class="hljs-comment">//去除前导0</span><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="高精度与低精度乘法"><a class="markdownIt-Anchor" href="#高精度与低精度乘法"></a> 高精度与低精度乘法</h4>
<blockquote>
<p>低精度指的是可以用基本数据类型储存</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//模板一</span><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">big_mul</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s1, <span class="hljs-built_in">string</span> s2)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(s2 == <span class="hljs-string">&quot;0&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s1.size() - <span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>; i &gt;= <span class="hljs-number">0</span> || t; i--)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; s1.size()) t += (s1[i] - <span class="hljs-number">48</span>) * stoi(s2);<br>        s = (<span class="hljs-keyword">char</span>)(t % <span class="hljs-number">10</span> + <span class="hljs-number">48</span>) + s;<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-comment">//模板二</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">big_mul</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;A, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.size() || t; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; A.size()) t += A[i] * b;<br>        C.push_back(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back() == <span class="hljs-number">0</span>) C.pop_back();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="高精度与低精度除法"><a class="markdownIt-Anchor" href="#高精度与低精度除法"></a> 高精度与低精度除法</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">模板一<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">big_div</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s1, <span class="hljs-built_in">string</span> s2, <span class="hljs-keyword">int</span> &amp;r)</span></span>&#123;<br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s1.size(); i++)&#123;<br>        r =  r * <span class="hljs-number">10</span> + s1[i] - <span class="hljs-number">48</span>;<br>        s = s + (<span class="hljs-keyword">char</span>)(r / stoi(s2) + <span class="hljs-number">48</span>);<br>        r %= stoi(s2);<br>    &#125;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span>(s[k] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; k &lt; s.size() - <span class="hljs-number">1</span>) k++; s.erase(<span class="hljs-number">0</span>, k);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br>模板二<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;A, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; C;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = A.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.push_back(r / b);<br>        r %= b;<br>    &#125;<br>    reverse(C.begin(), C.end());<br>    <span class="hljs-keyword">while</span> (C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back() == <span class="hljs-number">0</span>) C.pop_back();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>在高精度加减法中用模板一更快，乘除法中用模板二更快，对于模板二main中的输入输出格式是相同的。</p>
</blockquote>
<hr />
<h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2>
<h3 id="链表数组模拟静态链表速度快"><a class="markdownIt-Anchor" href="#链表数组模拟静态链表速度快"></a> 链表(数组模拟，静态链表，速度快)</h3>
<h4 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h4>
<blockquote>
<ol>
<li>单链表在算法中多用邻接表</li>
<li>邻接表在用在图和树的储存</li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100010</span>;<br><span class="hljs-comment">//head为头结点的地址，idx为当前结点的地址，ne[]为next的结点的指针，e为当前结点的值</span><br><span class="hljs-keyword">int</span> head, idx, e[maxn], ne[maxn];<br><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">void</span> init&#123;<br>    head = <span class="hljs-number">-1</span>;<br>    idx = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//在头结点插入一个数n</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert2head</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    e[idx] = n, ne[idx] = head, head = idx++;<br>&#125;<br><span class="hljs-comment">//在一个结点后新新插入一个数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert2x</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    e[idx] = x, ne[idx] = ne[k], ne[k] = idx++;<br>&#125;<br><span class="hljs-comment">//将头结点删除（需要保证头结点的存在需要特判）在调用之前特判if(!k) head = ne[head]</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    ne[k] = ne[ne[k]];<br>&#125;<br><span class="hljs-keyword">int</span> main&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h4>
<blockquote>
<ol>
<li>优化某些问题</li>
</ol>
</blockquote>
<hr />
<h3 id="栈与队列单调队列-单调栈"><a class="markdownIt-Anchor" href="#栈与队列单调队列-单调栈"></a> 栈与队列:单调队列、单调栈</h3>
<hr />
<h3 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> kmp</h3>
<hr />
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记</title>
    <url>/2021/02/02/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="c版本"><a class="markdownIt-Anchor" href="#c版本"></a> C++版本</h1>
<a id="more"></a>
<h2 id="评测结果"><a class="markdownIt-Anchor" href="#评测结果"></a> 评测结果</h2>
<table>
<thead>
<tr>
<th style="text-align:center">答案正确</th>
<th style="text-align:center">Accepted</th>
<th style="text-align:center">AC</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">编译错误</td>
<td style="text-align:center">Compile Error</td>
<td style="text-align:center">CE</td>
</tr>
<tr>
<td style="text-align:center">答案错误</td>
<td style="text-align:center">Wrong Answer</td>
<td style="text-align:center">WA</td>
</tr>
<tr>
<td style="text-align:center">运行超时</td>
<td style="text-align:center">Time Limit Exceeded</td>
<td style="text-align:center">TLE</td>
</tr>
<tr>
<td style="text-align:center">运行错误</td>
<td style="text-align:center">Runtime Error</td>
<td style="text-align:center">RE</td>
</tr>
<tr>
<td style="text-align:center">内存超限</td>
<td style="text-align:center">Memory Limit Exceeded</td>
<td style="text-align:center">MLE</td>
</tr>
<tr>
<td style="text-align:center">格式错误</td>
<td style="text-align:center">Presentation Error</td>
<td style="text-align:center">PE</td>
</tr>
<tr>
<td style="text-align:center">输出超限</td>
<td style="text-align:center">Output Limit Exceeded</td>
<td style="text-align:center">OLE</td>
</tr>
</tbody>
</table>
<h3 id="答案正确accepted-ac"><a class="markdownIt-Anchor" href="#答案正确accepted-ac"></a> 答案正确(Accepted, AC)</h3>
<blockquote>
<p>恭喜你!所提交的代码通过了数据!这个评测结果应该是大家最喜欢见到的，也非常好理解。如果是单点测试，那么每通过一组数据，就会返回一个Accepted;如果是多点测试，那么只有当通过了所有数据时，才会返回Accepted。</p>
</blockquote>
<h3 id="编译错误compile-error-ce"><a class="markdownIt-Anchor" href="#编译错误compile-error-ce"></a> 编译错误(Compile Error, CE)</h3>
<blockquote>
<p>很显然，如果代码没有办法通过编译，那么就会返回Compile Error。这时要先注意是不是选错了语言，然后再看本地的编译器能不能编译通过刚刚提交的代码，修改之后再次提交即可。</p>
</blockquote>
<h3 id="答案错误wrong-answer-wa"><a class="markdownIt-Anchor" href="#答案错误wrong-answer-wa"></a> 答案错误(Wrong Answer, WA)</h3>
<blockquote>
<p>“答案错误”是比较令人懊恼的结果，因为这说明代码有漏洞或者算法根本就是错误的,只是恰好能过样例而已。不过有时可能是因为输出了一些调试信息导致的，那就删掉多余的输出内容再输出。当然，大部分情况下都需要认真检查代码的逻辑有没有问题。</p>
</blockquote>
<h3 id="运行超时time-limit-exceeded-tle"><a class="markdownIt-Anchor" href="#运行超时time-limit-exceeded-tle"></a> 运行超时(Time Limit Exceeded, TLE)</h3>
<blockquote>
<p>由于每道题都会规定程序运行时间的上限，因此当超过这个限制时就会返回TLE。一般来说，这一结果可能是由算法的时间复杂度过大而导致的，当然也可能是某组数据使得代码中某处地方死循环了。因此，要仔细思考最坏时间复杂度是多少，或者检查代码中是否可能出现特殊数据死循环的情况。</p>
</blockquote>
<h3 id="运行错误runtime-error-re"><a class="markdownIt-Anchor" href="#运行错误runtime-error-re"></a> 运行错误(Runtime Error, RE)</h3>
<blockquote>
<p>这一结果的可能性非常多，常见的有段错误（直接的原因是非法访问了内存，例如数组越界、指针乱指)、浮点错误（例如除数为0、模数为0)、递归爆栈（一般由递归时层数过深导致的）等。一般来说，需要先检查数组大小是否比题目的数据范围大，然后再去检查可不可能有特殊数据可以使除数或模数为0，有递归的情况则检查是否在大数据时递归层数太深。</p>
</blockquote>
<h3 id="内存超限memory-limit-exceeded-mle"><a class="markdownIt-Anchor" href="#内存超限memory-limit-exceeded-mle"></a> 内存超限(Memory Limit Exceeded, MLE)</h3>
<blockquote>
<p>每道题目都会有规定程序使用的空间上限，因此如果程序中使用太多的空间，则会返回MLE，例如数组太大一般最容易导致这个结果。</p>
</blockquote>
<h3 id="格式错误presentation-error-pe"><a class="markdownIt-Anchor" href="#格式错误presentation-error-pe"></a> 格式错误(Presentation Error, PE)</h3>
<blockquote>
<p>这应该是最接近Accepted的错误了，基本是由多输出了空格或者换行导致的，稍作修改即可。</p>
</blockquote>
<h3 id="输出超限output-limit-exceeded-ole"><a class="markdownIt-Anchor" href="#输出超限output-limit-exceeded-ole"></a> 输出超限(Output Limit Exceeded, OLE)</h3>
<blockquote>
<p>如果程序输出了过量的内容（一般是指过量非常多)，那么就会返回OLE。一般是由输出了大量的调试信息或者特殊数据导致的死循环输出导致的。</p>
</blockquote>
<hr />
<h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2>
<h3 id="十大经典排序算法"><a class="markdownIt-Anchor" href="#十大经典排序算法"></a> 十大经典排序算法</h3>
<table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">最好情况</th>
<th style="text-align:center">最坏情况</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">排序方式</th>
<th style="text-align:center">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">希尔排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><msup><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msup><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log ^2\left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484579999999998em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><msup><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msup><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log ^2\left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484579999999998em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">Out-place</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( \log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">计数排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">Out-place</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">桶排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">Out-place</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">基数排序</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>×</mo><mi>k</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\times k \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>×</mo><mi>k</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\times k \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>×</mo><mi>k</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\times k \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center">Out-place</td>
<td style="text-align:center">稳定</td>
</tr>
</tbody>
</table>
<p><a href="https://github.com/hustcc/JS-Sorting-Algorithm">Github</a></p>
<h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h3>
<img src="bubble_sort.gif" alt="bubble_sort" style="zoom:70%;" />
<blockquote>
<ol>
<li>最快的时候就是序列已经为正序（要排序还有何用）</li>
<li>最慢的时候就是序列反序（可以写for循环倒序输出数据）</li>
<li>flag判断是一种优化写法</li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123; <span class="hljs-comment">//进行n - 1轮</span><br>	<span class="hljs-keyword">int</span> flag = <span class="hljs-number">1</span>; <br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span> - i; j++)  <span class="hljs-comment">//每轮比较n - i - 1次</span><br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[j] &gt; <span class="hljs-built_in">array</span>[j + <span class="hljs-number">1</span>])&#123;<br>			swap(<span class="hljs-built_in">array</span>[j], <span class="hljs-built_in">array</span>[j + <span class="hljs-number">1</span>]);<br>			flag = <span class="hljs-number">0</span>;<br>		&#125;<br>	<span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//当flag不等于0的时候即已经完成排序</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="简单选择排序"><a class="markdownIt-Anchor" href="#简单选择排序"></a> 简单选择排序</h3>
<img src="selection_sort.gif" alt="selection_sort" style="zoom:70%;" />
<blockquote>
<p>什么数据进入都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的复杂度，数据规模越小越好，不占用额外的内存空间</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123; <span class="hljs-comment">//进行n - 1轮</span><br>	<span class="hljs-keyword">int</span> min = i;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">10</span>; j++)  <br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[j] &lt; <span class="hljs-built_in">array</span>[min])<br>			min = j;<br>	<span class="hljs-keyword">if</span>(min != i) <span class="hljs-comment">//可以不写这句话，并不会消耗很多时间</span><br>		swap(<span class="hljs-built_in">array</span>[i], <span class="hljs-built_in">array</span>[min]);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h3>
<img src="insertion_sort.gif" alt="insertion_sort" style="zoom:70%;" />
<blockquote>
<p>平均算法复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//直接插入</span><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>&#125;, j, temp;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>	<span class="hljs-keyword">for</span>( j = i - <span class="hljs-number">1</span>, temp = <span class="hljs-built_in">array</span>[i]; j &gt;=<span class="hljs-number">0</span> &amp;&amp; temp &lt; <span class="hljs-built_in">array</span>[j]; j--)<br>		<span class="hljs-built_in">array</span>[j + <span class="hljs-number">1</span>] = <span class="hljs-built_in">array</span>[j];<br>	<span class="hljs-built_in">array</span>[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br><span class="hljs-comment">//折半插入</span><br></code></pre></td></tr></table></figure>
<h3 id="2路归并排序采用分治法"><a class="markdownIt-Anchor" href="#2路归并排序采用分治法"></a> 2————路归并排序(采用分治法)</h3>
<img src="merge_sort.gif" alt="merge_sort" style="zoom:70%;" />
<blockquote>
<p>与选择排序一样不受输入数据的影响，但是比需要用更大的内存空间去换取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n\log \left( n \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>的时间复杂度。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//递归版</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> left_1, <span class="hljs-keyword">int</span> right_1, <span class="hljs-keyword">int</span> left_2, <span class="hljs-keyword">int</span> right_2)</span></span>&#123;<br>	<span class="hljs-keyword">int</span> i = left_1, j = left_2, temp[maxn], index = <span class="hljs-number">0</span>; <span class="hljs-comment">//left_2 = right_1 + 1</span><br>	<span class="hljs-keyword">while</span>(i &lt;= right_1 &amp;&amp; j &lt;= right_2)<br>		<span class="hljs-built_in">array</span>[i] &lt;= <span class="hljs-built_in">array</span>[j] ? temp[index++] = <span class="hljs-built_in">array</span>[i++] : temp[index++] = <span class="hljs-built_in">array</span>[j++];<br>	<span class="hljs-keyword">while</span>(i &lt;= right_1) temp[index++] = <span class="hljs-built_in">array</span>[i++];<br>	<span class="hljs-keyword">while</span>(j &lt;= right_2) temp[index++] = <span class="hljs-built_in">array</span>[j++];<br>	<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; index; i++)<br>		<span class="hljs-built_in">array</span>[left_1 + i] = temp[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;<br>	<span class="hljs-keyword">if</span>(left &lt; right)&#123;<br>		<span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>		merge_sort(<span class="hljs-built_in">array</span>, left, mid);<br>		merge_sort(<span class="hljs-built_in">array</span>, mid + <span class="hljs-number">1</span>, right);<br>		merge(<span class="hljs-built_in">array</span>, left, mid, mid + <span class="hljs-number">1</span>, right);<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span> , <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span> ,<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;<br>	merge_sort(<span class="hljs-built_in">array</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">9</span>);<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">array</span>[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//迭代版</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> left_1, <span class="hljs-keyword">int</span> right_1, <span class="hljs-keyword">int</span> left_2, <span class="hljs-keyword">int</span> right_2)</span></span>&#123;<br>	<span class="hljs-keyword">int</span> i = left_1, j = left_2, temp[maxn], index = <span class="hljs-number">0</span>; <span class="hljs-comment">//left_2 = right_1 + 1</span><br>	<span class="hljs-keyword">while</span>(i &lt;= right_1 &amp;&amp; j &lt;= right_2)&#123;<br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[i] &lt;= <span class="hljs-built_in">array</span>[j])&#123;<br>			temp[index++] = <span class="hljs-built_in">array</span>[i++];<br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			temp[index++] = <span class="hljs-built_in">array</span>[j++];<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">while</span>(i &lt;= right_1) temp[index++] = <span class="hljs-built_in">array</span>[i++];<br>	<span class="hljs-keyword">while</span>(j &lt;= right_2) temp[index++] = <span class="hljs-built_in">array</span>[j++];<br>	<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; index; i++)&#123;<br>		<span class="hljs-built_in">array</span>[left_1 + i] = temp[i];<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> step = <span class="hljs-number">2</span>; step / <span class="hljs-number">2</span> &lt;= n; step *= <span class="hljs-number">2</span>)&#123;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += step)&#123;<br>			<span class="hljs-keyword">int</span> mid = i + step / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>			<span class="hljs-keyword">if</span>(mid + <span class="hljs-number">1</span> &lt; n)&#123;<br>				merge(<span class="hljs-built_in">array</span>, i , mid, mid + <span class="hljs-number">1</span>, min(i + step - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>));<br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[] = &#123; <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span> , <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>	<span class="hljs-keyword">int</span> n = <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br>	<span class="hljs-built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	merge_sort(<span class="hljs-built_in">array</span>, n);<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">array</span>[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//如果题目只要求给出没一趟结束时的序列，那么完全可以用sort函数代替merge函数（时间允许）可以先考虑用sort函数，然后超时的话自己写归并排序。</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[], <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> step = <span class="hljs-number">2</span>; step / <span class="hljs-number">2</span> &lt;= n; step *= <span class="hljs-number">2</span>)&#123;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += step)&#123;<br>			sort(<span class="hljs-built_in">array</span> + i, <span class="hljs-built_in">array</span> + min(i + step, n));<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3>
<img src="quick_sort.gif" alt="quick_sort" style="zoom:70%;" />
<h3 id="稳定不稳定"><a class="markdownIt-Anchor" href="#稳定不稳定"></a> 稳定&amp;不稳定</h3>
<blockquote>
<p>相对位置发生变换，例如A5,B8,C5,D2,E9稳定排序后变成D2,A5,C5,B8,E9，不稳定排序后变为D2,C5,A5,B8,E9即A5跑到C5后面，相对位置发生变化。</p>
</blockquote>
<blockquote>
<p>稳定</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span>&#123;</span><br>	<span class="hljs-built_in">string</span> name;<br>	<span class="hljs-keyword">int</span> score;<br>&#125;stu[<span class="hljs-number">5</span>], stu_1;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>		<span class="hljs-built_in">cin</span> &gt;&gt; stu[i].name &gt;&gt; stu[i].score;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>		<span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span> - i; j++)&#123;<br>			<span class="hljs-keyword">if</span>(stu[j].score &gt; stu[j + <span class="hljs-number">1</span>].score)&#123;<br>				flag = <span class="hljs-number">1</span>;<br>				stu_1 = stu[j];<br>				stu[j] = stu[j + <span class="hljs-number">1</span>];<br>				stu[j + <span class="hljs-number">1</span>] = stu_1;<br>			&#125;<br>		&#125;<br>		<span class="hljs-keyword">if</span>(!flag) <span class="hljs-keyword">break</span>;+<br>	&#125;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>		<span class="hljs-built_in">cout</span> &lt;&lt; stu[i].name &lt;&lt; stu[i].score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>不稳定</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-built_in">string</span> s[<span class="hljs-number">5</span>], temp;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>		<span class="hljs-built_in">cin</span> &gt;&gt; s[i];<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>		<span class="hljs-keyword">int</span> min = i;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">5</span>; j++)  <br>			<span class="hljs-keyword">if</span>(s[j][<span class="hljs-number">1</span>] &lt; s[min][<span class="hljs-number">1</span>])<br>				min = j;<br>		<span class="hljs-keyword">if</span>(min != i)&#123;<br>			temp = s[min];<br>			s[min] = s[i];<br>			s[i] = temp;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>		<span class="hljs-built_in">cout</span> &lt;&lt; s[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr />
<h2 id="贪心"><a class="markdownIt-Anchor" href="#贪心"></a> 贪心</h2>
<h3 id="简单贪心"><a class="markdownIt-Anchor" href="#简单贪心"></a> 简单贪心</h3>
<blockquote>
<p>是一种求解最优化问题的方法局部最优，要使得全局最优就要每一步都是最优的</p>
</blockquote>
<p><a href="https://blog.csdn.net/zy440458/article/details/113731444">B1020</a><br />
<a href="https://blog.csdn.net/zy440458/article/details/112847493">B1023</a></p>
<h3 id="区间贪心"><a class="markdownIt-Anchor" href="#区间贪心"></a> 区间贪心</h3>
<hr />
<h2 id="two-pointers"><a class="markdownIt-Anchor" href="#two-pointers"></a> two pointers</h2>
<blockquote>
<p>利用序列的递增（递减）性，来将复杂度降至<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
</blockquote>
<p>例如在给定序列{1,2,3,4,5,6}中找到满足任意两数相加的和为8，eg：2+6=8与3+5=8，不包括6+2=8和3+5=8.</p>
<blockquote>
<p>常规解法二重循环枚举，但是这样的复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，对n在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>的规模时是不可承受的。</p>
</blockquote>
<p>对于递增序列</p>
<ol>
<li>当a[j]+a[i] &gt; M, 显然有a[i]+a[j+1] &gt; M,即无需再对a[j]之后的数据进行枚举。</li>
<li>对于a[i]，如果找到一个a[j]，使得a[i] + a[j] &gt; M恰好成立，那么a[i + 1] + a[j] &gt; M成立，因此a[i]之后的元素也不用再去枚举。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-keyword">int</span> n = <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)<br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[i] + <span class="hljs-built_in">array</span>[j] == <span class="hljs-number">8</span>)<br>			<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">array</span>[i] &lt;&lt; <span class="hljs-string">&quot; + &quot;</span> &lt;&lt; <span class="hljs-built_in">array</span>[j]  &lt;&lt; <span class="hljs-string">&quot; = 8&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure>
<p>对于递增序列</p>
<ol>
<li>如果满足a[i] + a[j] == M，说明找到了其中一组方案，由于序列递增，不等式a[i + 1] + a[j] &gt; M与a[i] + a[j - 1] &lt; M均成立，但是a[i + 1]与a[j - 1]与M的大小关系未知因此剩下的只可能在区间[i+1,j-1]中产生。</li>
<li>如果满足a[i] + a[j] &gt; M，由于序列递增，不等式a[i + 1] + a[j] &gt; M成立，因此剩下的只可能在区间[i,j-1]中产生。</li>
<li>如果满足a[i] + a[j] &lt; M，由于序列递增，不等式a[i] + a[j - 1] &lt; M成立，因此剩下的只可能在区间[i + 1, j]产生。</li>
</ol>
<img src="图片1.png" alt="图片1" style="zoom:70%;" />
<blockquote>
<p>two pointers思想复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-keyword">int</span> n = <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = n - <span class="hljs-number">1</span>; i &lt; j; )<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[i] + <span class="hljs-built_in">array</span>[j] == <span class="hljs-number">8</span>)&#123;<br>		<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">array</span>[i] &lt;&lt; <span class="hljs-string">&quot; + &quot;</span> &lt;&lt; <span class="hljs-built_in">array</span>[j]  &lt;&lt; <span class="hljs-string">&quot; = 8&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>		i++;<br>		j--;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[i] + <span class="hljs-built_in">array</span>[j] &lt; <span class="hljs-number">8</span>) i++;<br>	<span class="hljs-keyword">else</span> j--;<br></code></pre></td></tr></table></figure>
<p>序列合并问题</p>
<blockquote>
<p>两个有序数列合并成一个有序数列</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> array_1[], <span class="hljs-keyword">int</span> array_2[], <span class="hljs-keyword">int</span> array_3[], <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span></span>&#123;<br>	<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span>(i &lt; n &amp;&amp; j &lt; m)&#123;<br>		<span class="hljs-keyword">if</span>(array_1[i] &lt;= array_2[j])&#123;<br>			array_3[k++] = array_1[i++];<br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			array_3[k++] = array_2[j++];<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">while</span>(i &lt; n) array_3[k++] = array_1[i++];<br>	<span class="hljs-keyword">while</span>(j &lt; m) array_3[k++] = array_2[j++];<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>广义two pointers是利用本身的序列的特性，使用两个下标i、j对序列进行扫描，可以是同向扫描，也可以是反向扫描。</p>
</blockquote>
]]></content>
      <categories>
        <category>PAT</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>练字</title>
    <url>/2021/01/23/%E7%BB%83%E5%AD%97/</url>
    <content><![CDATA[<h2 id="2021-01-23"><a class="markdownIt-Anchor" href="#2021-01-23"></a> 2021-01-23</h2>
<a id="more"></a>
<blockquote>
<p>今天学习了垂露竖、点、短横</p>
</blockquote>
<blockquote>
<p>垂露竖的要点：起笔略顿，回锋收笔</p>
<p>点的要点：轻轻写入，回锋收笔</p>
<p>短横的要点：至末端耸肩，短而粗壮</p>
</blockquote>
<img src="one.png" alt="one" style="zoom:25%;" />
<img src="two.png" alt="two" style="zoom:25%;" />
<img src="three.png" alt="three" style="zoom:25%;" />
]]></content>
      <categories>
        <category>练字</category>
        <category>楷书</category>
      </categories>
      <tags>
        <tag>楷书</tag>
      </tags>
  </entry>
</search>
